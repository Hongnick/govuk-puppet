#!/bin/sh
### BEGIN INIT INFO
# Provides:          mtail
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Extract monitoring data from logs
# Description:       mtail is a tool for extracting metrics from application
#                    logs to be exported into a timeseries database or
#                    timeseries calculator for alerting and dashboarding.
#                    It aims to fill a niche between applications that do not
#                    export their own internal state, and existing monitoring
#                    systems, without patching those applications or rewriting
#                    the same framework for custom extraction glue code.
#                    Metrics are exported for scraping by a collector as JSON
#                    or Prometheus format over HTTP, or can be periodically
#                    sent to a collectd, StatsD, or Graphite collector socket.
### END INIT INFO

# Based on Mart√≠n Ferrari <tincho@debian.org> mtail init script for Debian

DESC="monitoring data extractor from application logs"
DAEMON=/usr/bin/mtail
NAME=mtail
USER=mtail
PIDFILE=/var/run/mtail/mtail.pid
LOGFILE=/var/log/mtail/mtail.log

# Defaults.
ENABLED=0
LOGS=
PORT=
COLLECTD_SOCKETPATH=
GRAPHITE_HOST_PORT=
STATSD_HOSTPORT=
METRIC_PUSH_INTERVAL=
EXTRA_ARGS=

[ -r /etc/default/$NAME ] && . /etc/default/$NAME
if [ -z "$ENABLED" -o "$ENABLED" = "0" -o "$ENABLED" = "no" ] ; then
    echo "$NAME disabled, see /etc/default/$NAME"
    exit 0
fi

. /lib/lsb/init-functions

ARGS="-progs /etc/mtail "
[ -n "$LOGS" ] && ARGS="${ARGS} -logs $LOGS"
[ -n "$PORT" ] && ARGS="${ARGS} -port $PORT"
[ -n "$COLLECTD_SOCKETPATH" ] && \
    ARGS="${ARGS} -collectd_socketpath $COLLECTD_SOCKETPATH"
[ -n "$GRAPHITE_HOSTPORT" ] && \
    ARGS="${ARGS} -graphite_host_port $GRAPHITE_HOSTPORT"
[ -n "$STATSD_HOSTPORT" ] && ARGS="${ARGS} -statsd_hostport $STATSD_HOSTPORT"
[ -n "$METRIC_PUSH_INTERVAL" ] && \
    ARGS="${ARGS} -metric_push_interval_seconds $METRIC_PUSH_INTERVAL"
[ -n "$EXTRA_ARGS" ] && ARGS="${ARGS} $EXTRA_ARGS"

test -x $DAEMON || exit 0

start_mtail()
{
    mkdir -p `dirname $PIDFILE` || true
    chown -R $USER: `dirname $LOGFILE`
    chown -R $USER: `dirname $PIDFILE`

    start-stop-daemon --start --background --chuid $USER --pidfile $PIDFILE --make-pidfile \
      --startas $DAEMON -- $ARGS
}

stop_mtail() {
    start-stop-daemon --stop --retry TERM/10/KILL/5 --quiet --oknodo --pidfile $PIDFILE

    if [[ $? -eq 0 ]] ; then
      rm -f $PIDFILE
    fi
}

status_mtail() {
    start-stop-daemon --status --pidfile $PIDFILE
}

case "$1" in
    start)
        log_begin_msg "Starting $DESC"
        start_mtail
        log_end_msg $?
    ;;
    stop)
        log_begin_msg "Stopping $DESC"
        stop_mtail
        log_end_msg $?
    ;;
    status)
        status_mtail
    ;;
    restart|force-reload)
        log_begin_msg "Restarting $DESC"
        stop_mtail
        start_mtail
        log_end_msg $?
    ;;
    *)
        echo "Usage: $0 {start|stop|status|restart|force-reload}" >&2
        exit 1
    ;;
esac
